@Book{Hunt2000,
author = {Hunt, Andrew and Thomas, David},
title = {The Pragmatic Programmer: From Journeyman to Master},
year = {2000},
isbn = {020161622X},
publisher = {Addison-Wesley Longman Publishing Co., Inc.},
address = {USA},
abstract = {What others in the trenches say about The Pragmatic Programmer... The cool thing about this book is that its great for keeping the programming process fresh. The book helps you to continue to grow and clearly comes from people who have been there. Kent Beck, author of Extreme Programming Explained: Embrace Change I found this book to be a great mix of solid advice and wonderful analogies! Martin Fowler, author of Refactoring and UML Distilled I would buy a copy, read it twice, then tell all my colleagues to run out and grab a copy. This is a book I would never loan because I would worry about it being lost. Kevin Ruland, Management Science, MSG-Logistics The wisdom and practical experience of the authors is obvious. The topics presented are relevant and useful.... By far its greatest strength for me has been the outstanding analogiestracer bullets, broken windows, and the fabulous helicopter-based explanation of the need for orthogonality, especially in a crisis situation. I have little doubt that this book will eventually become an excellent source of useful information for journeymen programmers and expert mentors alike. John Lakos, author of Large-Scale C++ Software Design This is the sort of book I will buy a dozen copies of when it comes out so I can give it to my clients. Eric Vought, Software Engineer Most modern books on software development fail to cover the basics of what makes a great software developer, instead spending their time on syntax or technology where in reality the greatest leverage possible for any software team is in having talented developers who really know their craft well. An excellent book. Pete McBreen, Independent Consultant Since reading this book, I have implemented many of the practical suggestions and tips it contains. Across the board, they have saved my company time and money while helping me get my job done quicker! This should be a desktop reference for everyone who works with code for a living. Jared Richardson, Senior Software Developer, iRenaissance, Inc. I would like to see this issued to every new employee at my company.... Chris Cleeland, Senior Software Engineer, Object Computing, Inc. If Im putting together a project, its the authors of this book that I want. . . . And failing that Id settle for people whove read their book. Ward Cunningham Straight from the programming trenches, The Pragmatic Programmer cuts through the increasing specialization and technicalities of modern software development to examine the core process--taking a requirement and producing working, maintainable code that delights its users. It covers topics ranging from personal responsibility and career development to architectural techniques for keeping your code flexible and easy to adapt and reuse. Read this book, and youll learn how to Fight software rot; Avoid the trap of duplicating knowledge; Write flexible, dynamic, and adaptable code; Avoid programming by coincidence; Bullet-proof your code with contracts, assertions, and exceptions; Capture real requirements; Test ruthlessly and effectively; Delight your users; Build teams of pragmatic programmers; and Make your developments more precise with automation. Written as a series of self-contained sections and filled with entertaining anecdotes, thoughtful examples, and interesting analogies, The Pragmatic Programmer illustrates the best practices and major pitfalls of many different aspects of software development. Whether youre a new coder, an experienced programmer, or a manager responsible for software projects, use these lessons daily, and youll quickly see improvements in personal productivity, accuracy, and job satisfaction. Youll learn skills and develop habits and attitudes that form the foundation for long-term success in your career. Youll become a Pragmatic Programmer.}
}

@Book{Martin2008,
author = {Martin, Robert C.},
title = {Clean Code: A Handbook of Agile Software Craftsmanship},
year = {2008},
isbn = {0132350882},
publisher = {Prentice Hall PTR},
address = {USA},
edition = {1},
abstract = {Even bad code can function. But if code isnt clean, it can bring a development organization to its knees. Every year, countless hours and significant resources are lost because of poorly written code. But it doesnt have to be that way.Noted software expert Robert C. Martin, presents a revolutionary paradigm with Clean Code: A Handbook of Agile Software Craftsmanship. Martin, who has helped bring agile principles from a practitioners point of view to tens of thousands of programmers, has teamed up with his colleagues from Object Mentor to distill their best agile practice of cleaning code on the fly into a book that will instill within you the values of software craftsman, and make you a better programmerbut only if you work at it.What kind of work will you be doing? Youll be reading codelots of code. And you will be challenged to think about whats right about that code, and whats wrong with it. More importantly you will be challenged to reassess your professional values and your commitment to your craft. Clean Code is divided into three parts. The first describes the principles, patterns, and practices of writing clean code. The second part consists of several case studies of increasing complexity. Each case study is an exercise in cleaning up codeof transforming a code base that has some problems into one that is sound and efficient. The third part is the payoff: a single chapter containing a list of heuristics and smells gathered while creating the case studies. The result is a knowledge base that describes the way we think when we write, read, and clean code.Readers will come away from this book understandingHow to tell the difference between good and bad codeHow to write good code and how to transform bad code into good codeHow to create good names, good functions, good objects, and good classesHow to format code for maximum readability How to implement complete error handling without obscuring code logicHow to unit test and practice test-driven developmentWhat smells and heuristics can help you identify bad codeThis book is a must for any developer, software engineer, project manager, team lead, or systems analyst with an interest in producing better code.}
}

@misc{falcon,
  title = {{Falcon} Official webpage},
  howpublished = {\url{  https://falcon.readthedocs.io/en/stable/api/middleware.html}},
  note = {Accessed: 2021-02-19}
}
  


